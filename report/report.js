var report = [{"level": 1, "type": 6, "line_number": 1, "column_offset": 0, "description": "Multiple import in one line", "start_line": 1, "code_around": ["import re, ast", "from enum import Enum", ""]}, {"level": 1, "type": 2, "line_number": 200, "column_offset": 0, "description": "Blank line contains whitespace", "start_line": 198, "code_around": ["    # Test case:", "    # a = map(lambda x: x * x, b)", "    ", "    b = [1, 2, 3,4]", "    a = a = map(lambda x: x * x, b)"]}, {"level": 0, "type": 11, "line_number": 202, "column_offset": 12, "description": "Use lambda in high order function", "start_line": 200, "code_around": ["    ", "    b = [1, 2, 3,4]", "    a = a = map(lambda x: x * x, b)", "", "    if isinstance(node, ast.Call) and isinstance(node.func, ast.Name) \\"]}, {"level": 1, "type": 8, "line_number": 401, "column_offset": 0, "description": "Expected 2 blank lines, found 1", "start_line": 399, "code_around": ["            ALL_CHECKS[lint_type].append(check)", "", "def _generate_report(results, code):", "    report = []", "    code_by_line = code.split(\"\\n\")"]}, {"level": 0, "type": 10, "line_number": 475, "column_offset": 24, "description": "Wrong format naming", "start_line": 473, "code_around": ["                for lint_file in lint_files:", "                    with open(lint_file, 'r') as f:", "                        Code = f.read()", "", "                        total_results = _check_code(Code)"]}]